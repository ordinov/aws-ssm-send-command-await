name: "Execute AWS SSM Command"
description: "Send a command to an EC2 instance using AWS SSM and wait for its completion."
author: "ordinov, Juni-ali"
branding:
  icon: "server"
  color: "blue"
inputs:
  aws-region:
    description: "The AWS region where the EC2 instance is located (e.g., us-east-1)."
    required: true
  aws-access-key-id:
    description: "AWS Access Key ID for authentication."
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key for authentication."
    required: true
  instance-tag-name:
    description: "The tag name of the EC2 instance (e.g., 'MyInstance'). Only required if instance-id is not provided."
    required: false
  instance-id:
    description: "The EC2 instance ID (e.g., 'i-0abcd1234efgh5678'). Only required if instance-tag-name is not provided."
    required: false
  command:
    description: "The shell command to execute on the EC2 instance (e.g., 'uptime')."
    required: true
outputs:
  command-output:
    description: "The output from the executed command."
    value: ${{ steps.wait_and_set_outputs.outputs.command-output }}
  command-error:
    description: "The error output from the executed command (if any)."
    value: ${{ steps.wait_and_set_outputs.outputs.command-error }}
runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Determine EC2 Instance ID
      id: determine_instance_id
      shell: bash
      run: |
        if [ -n "${{ inputs.instance-id }}" ]; then
          echo "Using provided instance ID: ${{ inputs.instance-id }}"
          echo "INSTANCE_ID=${{ inputs.instance-id }}" >> $GITHUB_ENV
        elif [ -n "${{ inputs.instance-tag-name }}" ]; then
          echo "Resolving instance ID from tag name: ${{ inputs.instance-tag-name }}"
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" \
          "Name=tag:Name,Values='${{ inputs.instance-tag-name }}'" \
          --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "::error::No running instance found with tag name '${{ inputs.instance-tag-name }}'"
            exit 1
          fi
          echo "Resolved Instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        else
          echo "::error::Either instance-id or instance-tag-name must be provided."
          exit 1
        fi

    - name: Execute command on EC2 via SSM
      id: execute_command
      shell: bash
      run: |
        ESCAPED_COMMAND=$(echo '${{ inputs.command }}' | awk '{printf("'\''%s'\'', ", $0)}')
        ESCAPED_COMMAND="[${ESCAPED_COMMAND%, }]"
        echo "debug: $ESCAPED_COMMAND"
        COMMAND_ID=$(aws ssm send-command \
          --instance-id $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --comment "Executing user command via SSM" \
          --parameters commands="$ESCAPED_COMMAND" \
          --query "Command.CommandId" \
          --output text)
        if [ -z "$COMMAND_ID" ]; then
          echo "::error::Failed to initiate SSM command."
          exit 1
        fi
        echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

    - name: Wait for command completion and set outputs
      id: wait_and_set_outputs
      shell: bash
      run: |
        while true; do
          STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query 'Status' \
              --output text)
          
          if [ "$STATUS" == "Success" ]; then
            OUTPUT=$(aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --query 'StandardOutputContent' \
                --output text | tr '\n' ' | ' | xargs)
            ERROR=$(aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --query 'StandardErrorContent' \
                --output text | tr '\n' ' | ' | xargs)

            echo "Command Output: $OUTPUT"
            echo "Command Errors (if exist): $ERROR"
            
            echo "command-output=$OUTPUT" >> $GITHUB_OUTPUT
            echo "command-error=$ERROR" >> $GITHUB_OUTPUT
            
            break
          elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
            echo "::error::Command failed or was cancelled."
            exit 1
          else
            echo "Waiting for command to finish..."
            sleep 2
          fi
        done
